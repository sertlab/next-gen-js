"use strict";

var tracker = require('./common/tracker');
var util = require('./common/util');
module.exports.init = function (endpointDomainResolver) {
  var publicName = window.dmtrackingobjectname;
  var queue = window[publicName].q;
  var insightVersion = 'webInsight v1.0';
  var profileCode;
  var profileCookieDomains;
  window[publicName] = function (command) {
    var params = arguments;
    switch (command) {
      case 'create':
        create(params[1], params[2]);
        break;
      case 'track':
        trackRequest(params[1]);
        break;
      case 'identify':
        identifyUser(params[1]);
        break;
      case 'cartInsight':
        trackCart(params[1]);
        break;
      case 'version':
        getInsightVersion();
        break;
    }
  };
  util.processQueue(queue, window[publicName]);
  function create(code, cookieDomains) {
    profileCode = code;
    profileCookieDomains = cookieDomains;
  }
  function newTracker() {
    return tracker.newTracker(profileCookieDomains);
  }
  function trackRequest(customVars) {
    var t = newTracker();
    t.setQueryValues();
    t.addPageVars();
    t.addTrackingVars();
    t.addCustomVars(customVars);
    t.addRecordId();
    t.addSessionId();
    util.loadEndpoint(t.buildUrl(buildUrlBase('pagevisit')));
  }
  function identifyUser(email) {
    var t = newTracker();
    t.addRecordId();
    t.addCurrentDomain();
    t.addEmail(email);
    t.addSessionId();
    util.loadEndpoint(t.buildUrl(buildUrlBase('identify')));
  }
  function trackCart(param) {
    var t = newTracker();
    t.addRecordId();
    t.addSessionId();
    util.postEndpoint(t.buildUrl(buildUrlBase('cartInsight')), param);
  }
  function getInsightVersion() {
    console.log(insightVersion);
  }
  function buildUrlBase(endpoint) {
    var accountId = profileCode || window.dm_insight_id;
    return endpointDomainResolver(accountId) + endpoint + '?accountID=' + accountId;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ0cmFja2VyIiwicmVxdWlyZSIsInV0aWwiLCJtb2R1bGUiLCJleHBvcnRzIiwiaW5pdCIsImVuZHBvaW50RG9tYWluUmVzb2x2ZXIiLCJwdWJsaWNOYW1lIiwid2luZG93IiwiZG10cmFja2luZ29iamVjdG5hbWUiLCJxdWV1ZSIsInEiLCJpbnNpZ2h0VmVyc2lvbiIsInByb2ZpbGVDb2RlIiwicHJvZmlsZUNvb2tpZURvbWFpbnMiLCJjb21tYW5kIiwicGFyYW1zIiwiYXJndW1lbnRzIiwiY3JlYXRlIiwidHJhY2tSZXF1ZXN0IiwiaWRlbnRpZnlVc2VyIiwidHJhY2tDYXJ0IiwiZ2V0SW5zaWdodFZlcnNpb24iLCJwcm9jZXNzUXVldWUiLCJjb2RlIiwiY29va2llRG9tYWlucyIsIm5ld1RyYWNrZXIiLCJjdXN0b21WYXJzIiwidCIsInNldFF1ZXJ5VmFsdWVzIiwiYWRkUGFnZVZhcnMiLCJhZGRUcmFja2luZ1ZhcnMiLCJhZGRDdXN0b21WYXJzIiwiYWRkUmVjb3JkSWQiLCJhZGRTZXNzaW9uSWQiLCJsb2FkRW5kcG9pbnQiLCJidWlsZFVybCIsImJ1aWxkVXJsQmFzZSIsImVtYWlsIiwiYWRkQ3VycmVudERvbWFpbiIsImFkZEVtYWlsIiwicGFyYW0iLCJwb3N0RW5kcG9pbnQiLCJjb25zb2xlIiwibG9nIiwiZW5kcG9pbnQiLCJhY2NvdW50SWQiLCJkbV9pbnNpZ2h0X2lkIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL21vZHVsZXMvdHJhY2tpbmcvbGliL21haW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHRyYWNrZXIgPSByZXF1aXJlKCcuL2NvbW1vbi90cmFja2VyJyk7XHJcbnZhciB1dGlsID0gcmVxdWlyZSgnLi9jb21tb24vdXRpbCcpO1xyXG5cclxuXHJcbm1vZHVsZS5leHBvcnRzLmluaXQgPSAoZnVuY3Rpb24gKGVuZHBvaW50RG9tYWluUmVzb2x2ZXIpIHtcclxuICAgIFxyXG4gICAgdmFyIHB1YmxpY05hbWUgPSB3aW5kb3cuZG10cmFja2luZ29iamVjdG5hbWU7XHJcbiAgICB2YXIgcXVldWUgPSB3aW5kb3dbcHVibGljTmFtZV0ucTtcclxuICAgIHZhciBpbnNpZ2h0VmVyc2lvbiA9ICd3ZWJJbnNpZ2h0IHYxLjAnO1xyXG4gICAgdmFyIHByb2ZpbGVDb2RlO1xyXG4gICAgdmFyIHByb2ZpbGVDb29raWVEb21haW5zO1xyXG5cclxuICAgIHdpbmRvd1twdWJsaWNOYW1lXSA9IGZ1bmN0aW9uIChjb21tYW5kKSB7XHJcbiAgICAgICAgdmFyIHBhcmFtcyA9IGFyZ3VtZW50cztcclxuICAgICAgICBzd2l0Y2ggKGNvbW1hbmQpIHtcclxuICAgICAgICAgICAgY2FzZSAnY3JlYXRlJzogY3JlYXRlKHBhcmFtc1sxXSwgcGFyYW1zWzJdKTsgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ3RyYWNrJzogdHJhY2tSZXF1ZXN0KHBhcmFtc1sxXSk7IGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdpZGVudGlmeSc6IGlkZW50aWZ5VXNlcihwYXJhbXNbMV0pOyBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnY2FydEluc2lnaHQnOiB0cmFja0NhcnQocGFyYW1zWzFdKTsgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ3ZlcnNpb24nOiBnZXRJbnNpZ2h0VmVyc2lvbigpOyBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHV0aWwucHJvY2Vzc1F1ZXVlKHF1ZXVlLCB3aW5kb3dbcHVibGljTmFtZV0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIGNyZWF0ZShjb2RlLCBjb29raWVEb21haW5zKSB7XHJcbiAgICAgICAgcHJvZmlsZUNvZGUgPSBjb2RlXHJcbiAgICAgICAgcHJvZmlsZUNvb2tpZURvbWFpbnMgPSBjb29raWVEb21haW5zO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG5ld1RyYWNrZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRyYWNrZXIubmV3VHJhY2tlcihwcm9maWxlQ29va2llRG9tYWlucylcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB0cmFja1JlcXVlc3QoY3VzdG9tVmFycykge1xyXG4gICAgICAgIHZhciB0ID0gbmV3VHJhY2tlcigpO1xyXG4gICAgICAgIHQuc2V0UXVlcnlWYWx1ZXMoKTtcclxuICAgICAgICB0LmFkZFBhZ2VWYXJzKCk7XHJcbiAgICAgICAgdC5hZGRUcmFja2luZ1ZhcnMoKTtcclxuICAgICAgICB0LmFkZEN1c3RvbVZhcnMoY3VzdG9tVmFycyk7XHJcbiAgICAgICAgdC5hZGRSZWNvcmRJZCgpO1xyXG4gICAgICAgIHQuYWRkU2Vzc2lvbklkKCk7XHJcbiAgICAgICAgdXRpbC5sb2FkRW5kcG9pbnQodC5idWlsZFVybChidWlsZFVybEJhc2UoJ3BhZ2V2aXNpdCcpKSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gaWRlbnRpZnlVc2VyKGVtYWlsKSB7XHJcbiAgICAgICAgIHZhciB0ID0gbmV3VHJhY2tlcigpO1xyXG4gICAgICAgIHQuYWRkUmVjb3JkSWQoKTtcclxuICAgICAgICB0LmFkZEN1cnJlbnREb21haW4oKTtcclxuICAgICAgICB0LmFkZEVtYWlsKGVtYWlsKTtcclxuICAgICAgICB0LmFkZFNlc3Npb25JZCgpO1xyXG4gICAgICAgIHV0aWwubG9hZEVuZHBvaW50KHQuYnVpbGRVcmwoYnVpbGRVcmxCYXNlKCdpZGVudGlmeScpKSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdHJhY2tDYXJ0KHBhcmFtKSB7XHJcbiAgICAgICAgIHZhciB0ID0gbmV3VHJhY2tlcigpO1xyXG4gICAgICAgIHQuYWRkUmVjb3JkSWQoKTtcclxuICAgICAgICB0LmFkZFNlc3Npb25JZCgpO1xyXG4gICAgICAgIHV0aWwucG9zdEVuZHBvaW50KHQuYnVpbGRVcmwoYnVpbGRVcmxCYXNlKCdjYXJ0SW5zaWdodCcpKSwgcGFyYW0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldEluc2lnaHRWZXJzaW9uKCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGluc2lnaHRWZXJzaW9uKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBidWlsZFVybEJhc2UoZW5kcG9pbnQpIHtcclxuICAgICAgICB2YXIgYWNjb3VudElkID0gcHJvZmlsZUNvZGUgfHwgd2luZG93LmRtX2luc2lnaHRfaWQ7IFxyXG4gICAgICAgIHJldHVybiBlbmRwb2ludERvbWFpblJlc29sdmVyKGFjY291bnRJZCkgKyBlbmRwb2ludCArICc/YWNjb3VudElEPScgKyBhY2NvdW50SWQ7XHJcbiAgICB9XHJcbn0pOyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQztBQUN6QyxJQUFJQyxJQUFJLEdBQUdELE9BQU8sQ0FBQyxlQUFlLENBQUM7QUFHbkNFLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDQyxJQUFJLEdBQUksVUFBVUMsc0JBQXNCLEVBQUU7RUFFckQsSUFBSUMsVUFBVSxHQUFHQyxNQUFNLENBQUNDLG9CQUFvQjtFQUM1QyxJQUFJQyxLQUFLLEdBQUdGLE1BQU0sQ0FBQ0QsVUFBVSxDQUFDLENBQUNJLENBQUM7RUFDaEMsSUFBSUMsY0FBYyxHQUFHLGlCQUFpQjtFQUN0QyxJQUFJQyxXQUFXO0VBQ2YsSUFBSUMsb0JBQW9CO0VBRXhCTixNQUFNLENBQUNELFVBQVUsQ0FBQyxHQUFHLFVBQVVRLE9BQU8sRUFBRTtJQUNwQyxJQUFJQyxNQUFNLEdBQUdDLFNBQVM7SUFDdEIsUUFBUUYsT0FBTztNQUNYLEtBQUssUUFBUTtRQUFFRyxNQUFNLENBQUNGLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQUU7TUFDN0MsS0FBSyxPQUFPO1FBQUVHLFlBQVksQ0FBQ0gsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQUU7TUFDdkMsS0FBSyxVQUFVO1FBQUVJLFlBQVksQ0FBQ0osTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQUU7TUFDMUMsS0FBSyxhQUFhO1FBQUVLLFNBQVMsQ0FBQ0wsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQUU7TUFDMUMsS0FBSyxTQUFTO1FBQUVNLGlCQUFpQixFQUFFO1FBQUU7SUFBTTtFQUVuRCxDQUFDO0VBRURwQixJQUFJLENBQUNxQixZQUFZLENBQUNiLEtBQUssRUFBRUYsTUFBTSxDQUFDRCxVQUFVLENBQUMsQ0FBQztFQUU1QyxTQUFTVyxNQUFNLENBQUNNLElBQUksRUFBRUMsYUFBYSxFQUFFO0lBQ2pDWixXQUFXLEdBQUdXLElBQUk7SUFDbEJWLG9CQUFvQixHQUFHVyxhQUFhO0VBQ3hDO0VBRUEsU0FBU0MsVUFBVSxHQUFHO0lBQ2xCLE9BQU8xQixPQUFPLENBQUMwQixVQUFVLENBQUNaLG9CQUFvQixDQUFDO0VBQ25EO0VBRUEsU0FBU0ssWUFBWSxDQUFDUSxVQUFVLEVBQUU7SUFDOUIsSUFBSUMsQ0FBQyxHQUFHRixVQUFVLEVBQUU7SUFDcEJFLENBQUMsQ0FBQ0MsY0FBYyxFQUFFO0lBQ2xCRCxDQUFDLENBQUNFLFdBQVcsRUFBRTtJQUNmRixDQUFDLENBQUNHLGVBQWUsRUFBRTtJQUNuQkgsQ0FBQyxDQUFDSSxhQUFhLENBQUNMLFVBQVUsQ0FBQztJQUMzQkMsQ0FBQyxDQUFDSyxXQUFXLEVBQUU7SUFDZkwsQ0FBQyxDQUFDTSxZQUFZLEVBQUU7SUFDaEJoQyxJQUFJLENBQUNpQyxZQUFZLENBQUNQLENBQUMsQ0FBQ1EsUUFBUSxDQUFDQyxZQUFZLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztFQUM1RDtFQUVBLFNBQVNqQixZQUFZLENBQUNrQixLQUFLLEVBQUU7SUFDeEIsSUFBSVYsQ0FBQyxHQUFHRixVQUFVLEVBQUU7SUFDckJFLENBQUMsQ0FBQ0ssV0FBVyxFQUFFO0lBQ2ZMLENBQUMsQ0FBQ1csZ0JBQWdCLEVBQUU7SUFDcEJYLENBQUMsQ0FBQ1ksUUFBUSxDQUFDRixLQUFLLENBQUM7SUFDakJWLENBQUMsQ0FBQ00sWUFBWSxFQUFFO0lBQ2hCaEMsSUFBSSxDQUFDaUMsWUFBWSxDQUFDUCxDQUFDLENBQUNRLFFBQVEsQ0FBQ0MsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7RUFDM0Q7RUFFQSxTQUFTaEIsU0FBUyxDQUFDb0IsS0FBSyxFQUFFO0lBQ3JCLElBQUliLENBQUMsR0FBR0YsVUFBVSxFQUFFO0lBQ3JCRSxDQUFDLENBQUNLLFdBQVcsRUFBRTtJQUNmTCxDQUFDLENBQUNNLFlBQVksRUFBRTtJQUNoQmhDLElBQUksQ0FBQ3dDLFlBQVksQ0FBQ2QsQ0FBQyxDQUFDUSxRQUFRLENBQUNDLFlBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUFFSSxLQUFLLENBQUM7RUFDckU7RUFFQSxTQUFTbkIsaUJBQWlCLEdBQUc7SUFDekJxQixPQUFPLENBQUNDLEdBQUcsQ0FBQ2hDLGNBQWMsQ0FBQztFQUMvQjtFQUVBLFNBQVN5QixZQUFZLENBQUNRLFFBQVEsRUFBRTtJQUM1QixJQUFJQyxTQUFTLEdBQUdqQyxXQUFXLElBQUlMLE1BQU0sQ0FBQ3VDLGFBQWE7SUFDbkQsT0FBT3pDLHNCQUFzQixDQUFDd0MsU0FBUyxDQUFDLEdBQUdELFFBQVEsR0FBRyxhQUFhLEdBQUdDLFNBQVM7RUFDbkY7QUFDSixDQUFFIn0=